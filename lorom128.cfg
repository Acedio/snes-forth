# ca65 linker config for 128K SMC
# From blargg:
# https://wiki.superfamicom.org/basic-ca65-usage-for-snes-programming

# Physical areas of memory
# Names need not match, but it makes it easier to remember if they do.
MEMORY {
    ZEROPAGE:   start =        0, size =  $100;
    BSS:        start =     $300, size = $1700;
    BSS7E:      start =  $7E2000, size = $E000;
    BSS7F:      start =  $7F0000, size =$10000;

    ROM:        start =    $8000, size = $8000, type = ro, file = %O, fill = yes;
    BANK1:      start =   $18000, size = $8000, type = ro, file = %O, fill = yes;
    BANK2:      start =   $28000, size = $8000, type = ro, file = %O, fill = yes;
    BANK3:      start =   $38000, size = $8000, type = ro, file = %O, fill = yes;
}

# Logical areas code/data can be put into.
SEGMENTS {
    ZEROPAGE:   load = ZEROPAGE,    type = zp;
    BSS:        load = BSS,         type = bss, align = $100;
    BSS7E:      load = BSS7E,       type = bss, align = $100,   optional=yes;
    BSS7F:      load = BSS7F,       type = bss, align = $100,   optional=yes;

    CODE:       load = ROM,         type = ro,  align = $8000;
    RODATA:     load = ROM,         type = ro;
    UNSIZED:    load = ROM,         type = ro;
    HEADERNAME: load = ROM,         type = ro,  start =  $FFC0;
    ROMINFO:    load = ROM,         type = ro,  start =  $FFD5, optional = yes;
    VECTORS:    load = ROM,         type = ro,  start =  $FFE0;

    # The extra three banks
    BANK1:      load = BANK1,       type = ro,  align = $8000,  optional = yes;
    BANK2:      load = BANK2,       type = ro,  align = $8000,  optional = yes;
    BANK3:      load = BANK3,       type = ro,  align = $8000,  optional = yes;
}
