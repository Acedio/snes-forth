TRUE DEBUG !

: TEST-STACK-OPS
  DEPTH >R \ Save depth for checking the relative number of items on the stack.
  1 2 NIP 2 =
  DEPTH R@ 1+ = AND

  1 2 OVER
    1 = SWAP
    2 = AND SWAP
    1 = AND
    AND
    DEPTH R@ 1+ = AND

  1 2 TUCK
    2 = SWAP
    1 = AND SWAP
    2 = AND
    AND
    DEPTH R@ 1+ = AND

  1 2 3 ROT
    1 = SWAP
    3 = AND SWAP
    2 = AND
    AND
    DEPTH R@ 1+ = AND

  1 2 3 -ROT
    2 = SWAP
    1 = AND SWAP
    3 = AND
    AND
    DEPTH R@ 1+ = AND

  R> DROP
;

: TEST-RETURN-STACK
  $123456 A.>R
  R@ 0x3456 =
  R> DUP >R 0x3456 = AND
  A.R> 0x3456 = SWAP 0x0012 = AND AND
;

: TEST-UNTIL
  1 BEGIN DUP 1+ DUP 3 = UNTIL
  3 =
  SWAP 2 = AND
  SWAP 1 = AND
;

: TEST-WHILE
  1 BEGIN DUP 3 < WHILE DUP 1+ REPEAT
  3 =
  SWAP 2 = AND
  SWAP 1 = AND
;

: TEST-DO
  0 4 1 DO I + LOOP 6 =
;

: TEST-IF
  TRUE IF TRUE ELSE FALSE THEN TRUE =
  FALSE IF FALSE ELSE TRUE THEN TRUE = AND
  1 IF TRUE ELSE FALSE THEN TRUE = AND
  1 TRUE IF 2 + THEN 3 = AND
  1 FALSE IF 2 + THEN 1 = AND
;

: USE-CASE
  CASE
  1 OF 111 ENDOF
  2 OF 222 ENDOF
  >R 333 R>
  ENDCASE ;

: OVERLAPPING-CASE
  TRUE CASE
  TRUE OF 111 ENDOF
  TRUE OF 222 ENDOF
  ENDCASE ;

: TEST-CASE
  1 USE-CASE 111 =
  2 USE-CASE 222 = AND
  4 USE-CASE 333 = AND
  OVERLAPPING-CASE 111 = AND
;

: TEST-MATH-OP
  0 1 + 1 =
  -1 -2 - 1 = AND
  0x00 0x01 OR 1 = AND
  0x05 0x03 AND 1 = AND
  0x03 0x02 XOR 1 = AND
  0xFFFE INVERT 1 = AND
  0xFFFF NEGATE 1 = AND
  0xFF00 LSR 0x7F80 = AND
  0xFF00 2/ 0xFF80 = AND
  0x7F80 2* 0xFF00 = AND
  0x1234 HIBYTE 0x0012 = AND
  0x1234 SWAPBYTES 0x3412 = AND
;

: TEST-COMPARISON
  1 2 < TRUE =
  2 1 < FALSE = AND
  -1 1 < TRUE = AND
  1 -1 < FALSE = AND
  2 1 > TRUE = AND
  1 2 > FALSE = AND
  1 -1 > TRUE = AND
  -1 1 > FALSE = AND
  1 1 = TRUE = AND
  0 1 = FALSE = AND
  0 1 <> TRUE = AND
  1 1 <> FALSE = AND
  0x0001 0xFFFF U< TRUE = AND
  0xFFFF 0x0001 U< FALSE = AND
  0xFFFF 0x0001 U> TRUE = AND
  0x0001 0xFFFF U> FALSE = AND
;

: TEST-LITERALS
  $123456
  0x3456 =
  SWAP 0x0012 = AND
;

CREATELOWRAM TEST-LOWRAM-VAR
BANK@
LOWRAM BANK! 1 CELLS ALLOT
BANK!
CREATE TEST-VAR 1 CELLS ALLOT

: TEST-MEMORY
  21 TEST-LOWRAM-VAR !
  TEST-LOWRAM-VAR @ 21 =
  42 TEST-LOWRAM-VAR !
  TEST-LOWRAM-VAR @ 42 = AND ;

\ Lowram should still be accessible in different banks.
: TEST-BANKS
  0 BANK!
  33 TEST-LOWRAM-VAR !
  55 TEST-VAR !
  LOWRAM BANK!
  TEST-LOWRAM-VAR @ 33 =
  TEST-VAR @ 55 = AND ;

: MY-CONSTANT CREATE , DOES> @ ;

21 MY-CONSTANT TEST-MY-CONSTANT

: TEST-DOES TEST-MY-CONSTANT 21 = TEST-MY-CONSTANT 21 = AND ;

: TEST-MULT
  0x4000 0x40 PPU-MULT
  0x10 =
  SWAP 0 = AND ;

(
TODO: Implement the T{ ... -> ... }T notation.
: T{
: ->
)

: SHARED-TESTS
  TEST-STACK-OPS
  TEST-RETURN-STACK
  TEST-IF
  TEST-CASE
  TEST-UNTIL
  TEST-WHILE
  TEST-DO
  TEST-MATH-OP
  TEST-COMPARISON
  TEST-LITERALS
  TEST-MEMORY
  TEST-DOES
;

: LUA-ONLY-TESTS
  TEST-BANKS \ Not implemented on the SNES yet.
;

: SNES-ONLY-TESTS
  TEST-MULT
;

: SNES-MAIN
  SNES-ONLY-TESTS
  SHARED-TESTS
;

\ Needed to run on the SNES.
: SNES-NMI ;

SHARED-TESTS
LUA-ONLY-TESTS
